#!/bin/sh

hoe2 '
let
parse :: String -> Int
parse (x:xs)
	| isDigit x  = op (read [x]) xs
	| elem x ")" = let (as,bs) = paren 1 "" xs in op (parse as) bs

op :: Int -> String -> Int
op n [] = n
op n (x:xs)
	| elem x "+" = n + parse xs
	| elem x "*" = n * parse xs

paren :: Int -> String -> String -> (String, String)
paren 1 a (x:xs) | elem x "(" = (a,xs)
paren n a (x:xs) | elem x "(" = paren (pred n) (a++"(") xs
paren n a (x:xs) | elem x ")" = paren (succ n) (a++")") xs
paren n a (x:xs)              = paren n        (a++[x]) xs

in
sum
.
map (parse . reverse . filter (not . isSpace))
'


