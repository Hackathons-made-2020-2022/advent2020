#!/bin/sh

hoe2 '
let
isnt x = not . flip elem x
fixf f = fst . until (uncurry (==)) ((f &&& id) . fst) . (f&&&id)
reduce (o,l) = (nub (o ++ s), map (second (\\ map fst s) . first (\\ concatMap snd s)) l)
	where
	s = filter ((==1).length.snd)
		$ M.toList
		$ foldr (M.unionWith intersect) M.empty
		$ concatMap (\(i,a) -> [M.singleton l i | l<-a])
		$ l
in
intercalate ","
.
concatMap snd
.
sort
.
fst
.
fixf reduce
.
([],)
.
map (words . takeWhile (isnt "(") &&& tail . words . filter (isnt ",") . init . dropWhile (isnt "("))
.
lines
'

