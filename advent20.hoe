#!/bin/sh

hoe '
let

readInt :: String -> Int
readInt = read

match     x = and $ zipWith aligned x (tail x)
aligned a b = and $ zipWith (==) (map last a) (map head b)
check     x = all match $ (map (map snd)) $ x ++ transpose x
square    x = chunksOf (floor (sqrt (fromIntegral (length x)))) x

permute [] = [[]]
permute xs = [y : ys | x <- xs, ys <- permute (delete x xs), y <- flip x]

res x
	= sum
	$ map fst
		[ head $ head x
		, last $ head x
		, head $ last x
		, last $ last x
		]

flip x =
	map (\f -> second f x)
	[ id
	, reverse
	, map reverse
	, reverse . map reverse
	]

in
res
.
head
.
filter check
.
map square
.
permute
.
map (readInt . filter isDigit . head &&& tail)
.
splitOn [""]
'

