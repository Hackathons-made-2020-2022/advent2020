#!/bin/sh

hoe -m 'Data.Bool' '
let

match     x = and $ zipWith aligned x (tail x)
aligned a b = and $ zipWith (==) (map last a) (map head b)
check     x = all match $ (map (map snd)) $ x ++ transpose (map (map (second transpose)) x)
square    x = chunksOf (side x) x
side      x = floor (sqrt (fromIntegral (length x)))

accept m n p q y
	| n == 0    = True
	| m         = aligned (transpose (snd q)) (transpose (snd y))
	| otherwise = aligned (snd p) (snd y)

permute s n p q [] = [[]]
permute s n p q xs =
	let m = mod n s == 0
	in [y : ys | x <- xs, y <- orient x, accept m n p q y, ys <- permute s (succ n) y (bool q y m) (delete x xs)]

res    x = product $ map fst [ head $ head x , last $ head x , head $ last x , last $ last x ]
orient x = flip x ++ flip (second transpose x)
flip   x = map (\f -> second f x) [ id , reverse , map reverse , reverse . map reverse ]

in
res
. head
. filter check
. map square
. (\x -> permute (side x) 0 undefined undefined x)
. map (read . filter isDigit . head &&& tail)
. splitOn [""]
'

