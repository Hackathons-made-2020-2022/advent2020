#!/bin/sh

hoe2 -m Debug.Trace '
let

d n a b l h
	| elem n a  = d (pred n) a b l h
	| n < l     = d h a b l h
	| otherwise = n

rl n c = take l $ drop n (cycle c)     where l = length c

move c@(x:xs) = rl 1 $ e ++ a ++ f
	where
	(a,b)  = splitAt 3 xs
	ys     = x:b
	n      = d (pred x) a ys (minimum c) (maximum c)
	(e,f)  = splitAt (succ $ fromJust $ elemIndex n ys) ys

main
	= (++"\n")
	. (!! 100)
	. map
	( concatMap show
	. (\l -> take (pred $ length l) $ tail $ dropWhile (/= 1) $ cycle l)
	)
	. iterate move
	. map ((read :: String->Int) . return)
	. head
	. words

in
main
'

