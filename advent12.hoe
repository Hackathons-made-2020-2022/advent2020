#!/bin/sh

hoe2 -m Control.Monad.State "
let
	x :: (Char,Int) -> State (Int,Int,Char) ()
	x = \case
		('N',n) -> _2 += n
		('S',n) -> x ('N',negate n)
		('E',n) -> _1 += n
		('W',n) -> x ('E',negate n)
		('L',90)-> _3 %= fromJust.flip lookup [('E','N'),('S','E'),('W','S'),('N','W')]
		('L',n) -> x ('L',90) >> x ('L',n-90)
		('R',n) -> x ('L',360-n)
		('F',n) -> gets (view _3) >>= fromJust . flip lookup [('E',_1+=n),('S',_2-=n),('W',_1-=n),('N',_2+=n)]
in
	(\(a,b,_)->abs a+abs b)
	. ((0,0,'E')&~)
	. mapM_ x
	. map (\(l:n)->(l,read n))
	. words
"

